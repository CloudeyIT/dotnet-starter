name: Build & Test
on:
  push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
  
  build-test:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: |
            suffix=-test
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Test.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build-test
    container:
      image: ${{ needs.build-test.outputs.image }}
      env:
        APP__Database__MainDb__Host: postgres
        APP__Database__MainDb__Port: 5432
        APP__Database__MainDb__User: DotnetStarter_test
        APP__Database__MainDb__Password: DotnetStarter_test
        APP__Database__MainDb__Database: DotnetStarter_test
        APP__Identity__PrivateKey: ${{ secrets.IDENTITY_PRIVATE_KEY }}
        APP__AllowedOrigins: https://localhost,http://localhost
        SNAPSHOOTER_STRICT_MODE: "true"
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: DotnetStarter_test
          POSTGRES_PASSWORD: DotnetStarter_test
          POSTGRES_DB: DotnetStarter_test
        ports:
        - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    steps:
      - name: Run tests
        run: >-
          dotnet test 
          --no-build 
          --logger:"junit;LogFilePath=\artifacts\test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" 
          --results-directory:/artifacts/coverage
          --collect:"XPlat Code Coverage" 
          -s /src/DotnetStarter.Test/coverlet.runsettings
          /src/DotnetStarter.Test/DotnetStarter.Test.csproj
        env:
          APP__Database__MainDb__Host: postgres
          APP__Database__MainDb__Port: 5432
          APP__Database__MainDb__User: DotnetStarter_test
          APP__Database__MainDb__Password: DotnetStarter_test
          APP__Database__MainDb__Database: DotnetStarter_test
          APP__Identity__PrivateKey: ${{ secrets.IDENTITY_PRIVATE_KEY }}
          APP__AllowedOrigins: https://localhost,http://localhost
          SNAPSHOOTER_STRICT_MODE: "true"
      - name: Output coverage report
        run: pwsh /src/scripts/print-test-coverage.ps1 /artifacts/coverage
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            /artifacts/test-result.xml
            /artifacts/coverage/**/coverage.cobertura.xml
        
      

